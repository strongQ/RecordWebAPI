<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core.dll" #>
<#@ Assembly Name="System.Xml.dll" #>
<#@ Assembly Name="System.Xml.Linq.dll" #>
<#@ Assembly Name="System.Windows.Forms.dll" #>
<#@ Assembly Name="$(SolutionDir)packages\Microsoft.Data.Edm.5.0.1\lib\net40\Microsoft.Data.Edm.dll" #>
<#@ Assembly Name="$(SolutionDir)packages\Microsoft.Data.OData.5.0.1\lib\net40\Microsoft.Data.OData.dll" #>
<#@ Import Namespace="System" #>
<#@ Import Namespace="System.IO" #>
<#@ Import Namespace="System.Diagnostics" #>
<#@ Import Namespace="System.Linq" #>
<#@ Import Namespace="System.Xml"#>
<#@ Import Namespace="System.Xml.Linq" #>
<#@ Import Namespace="System.Collections" #>
<#@ Import Namespace="System.Collections.Generic" #>   
<#@ Import Namespace="Microsoft.Data.Edm.Csdl" #> 
<#@ Import Namespace="Microsoft.Data.Edm" #> 
<#@ Import Namespace="Microsoft.Data.OData" #> 
<#@ Import Namespace="Microsoft.Data.Edm.Annotations" #> 
<#@ Import Namespace="Microsoft.Data.Edm.Library.Values" #>
<#@ Import Namespace="System.Data.Services.Common"#>
<#@ Import Namespace="System.Text"#>
<#@ Import Namespace="System.Net"#>

<#
if (TransformContext == null)
{    
    TransformContext= new CodeGenerationContext();
    
    // If the MetadataFile propery was set, use it. If not, try and resolve it as a parameter to T4.
    if (string.IsNullOrEmpty(MetadataFile))
    {
        MetadataFile = this.Host.ResolveParameterValue("notempty", "notempty", "MetadataFile");
    }
    
    if (string.IsNullOrEmpty(MetadataFile))
    {
        // No metadata edmx file - use a MetadataUri we were provided
        if (string.IsNullOrEmpty(MetadataUri))
        {
            MetadataUri = this.Host.ResolveParameterValue("notempty", "notempty", "MetadataUri");
        }
		
		if (String.IsNullOrWhiteSpace(MetadataUri) && String.IsNullOrWhiteSpace(MetadataFile))
		{
			return "// To use this template, set either set the \"MetadataUri\" property to a valid $metadata URI of an OData service,\r\n" +
				"// or set \"MetadataFile\" to a valid .edmx file. They can be set by passing them as a parameter when running the template,\r\n" +
				"// or by hard-coding a value in Reference.tt.";
		}
        
        TransformContext.MetadataPath = MetadataUri;

        TransformContext.LoadEdmModelFromMetadataPath();
    }
    else 
    {
        // We were given an edmx file
        TransformContext.LoadEdmModelFromFile(MetadataFile);
    }
        
}

BeginWriteNamespace();

IEdmEntityContainer container = TransformContext.EdmModel.EntityContainers().FirstOrDefault();

var entitySetQuery = container.EntitySets();

// Write DataServiceContext 
WriteTypeDeclaration(container);
BeginWriteType(container);
WriteContextConstructor(container);
WriteContextTypeResolver(container);
WriteContextAbstractMethods();

// Wite DataServiceContext entity sets
foreach (IEdmEntitySet entitySet in entitySetQuery)
{
    WriteContextEntitySet(entitySet);
    WriteContextAddToEntitySetMethod(entitySet);
}
WriteServiceOperations(container);
EndWriteType(container);

// Write Entity types
Dictionary<string,IEdmEntityType> processedEntityTypes= new Dictionary<string,IEdmEntityType>();
foreach (IEdmEntitySet entitySet in entitySetQuery)
 {
    WriteEntitySetAttribute(entitySet);
    WriteEntity(entitySet.ElementType);
    processedEntityTypes.Add(entitySet.ElementType.Name,entitySet.ElementType);
 }    
// Write complex types
WriteComplexTypes();
WriteReferencedEntities(processedEntityTypes);

EndWriteNamespace();

#><#+ void BeginWriteNamespace(){ #>
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace <#=TransformContext.Namespace #>    
{
    using System;
<#+    }     void EndWriteNamespace()     { #>
}
    <#+
    }
void WriteTypeDeclaration(IEdmEntityContainer container )
    {
#>
    public partial class <#=container.Name #> : global::System.Data.Services.Client.DataServiceContext
<#+
    }


    void WriteContextConstructor(IEdmEntityContainer container)
    {
#>
        public <#=container.Name #>(global::System.Uri serviceRoot) : 
            base(serviceRoot<#=WriteContextConstructorDataServiceVersionParameterValue()#>)
        {
            this.ResolveName = new global::System.Func<global::System.Type, string>(this.ResolveNameFromType);
            this.ResolveType = new global::System.Func<string, global::System.Type>(this.ResolveTypeFromName);
            this.OnContextCreated();
        }
        
<#+
    }

    string WriteContextConstructorDataServiceVersionParameterValue()
    {
        string returnString= string.Empty;
        if (!string.IsNullOrEmpty(TransformContext.MaxProtocolVersion))
        {
            returnString=string.Format(", {0}",TransformContext.MaxProtocolVersion);
        }
        return returnString;
    }

    void WriteContextTypeResolver(IEdmEntityContainer container)
    {
        string schemaNamespace = TransformContext.EdmModel.SchemaElements.First<IEdmSchemaElement>().Namespace;
#>
    protected global::System.Type ResolveTypeFromName(string typeName)
    {
        if (typeName.StartsWith("<#=schemaNamespace#>", global::System.StringComparison.Ordinal))
        {
            return this.GetType().Assembly.GetType(string.Concat("<#=TransformContext.Namespace#>", typeName.Substring(<#=schemaNamespace.Length#>)), false);
        }

        return null;
    }

    protected string ResolveNameFromType(global::System.Type clientType)
    {
       if (clientType.Namespace.Equals("<#=TransformContext.Namespace #>", global::System.StringComparison.Ordinal))
       {
           return string.Concat("<#=TransformContext.EdmModel.SchemaElements.First<IEdmSchemaElement>().Namespace#>.", clientType.Name);
       }

       return null;
    }
        
<#+
    }    
    void WriteContextAbstractMethods()
    {
    #>
        partial void OnContextCreated();
        
<#+
    }    
    void WriteContextEntitySet(IEdmEntitySet entitySet)
    {
        
#>
        public global::System.Data.Services.Client.DataServiceQuery<<#=entitySet.ElementType.Name#>> <#=entitySet.Name#>
        {
            get
            {
                if ((this._<#=entitySet.Name#> == null))
                {
                    this._<#=entitySet.Name#> = base.CreateQuery<<#=entitySet.ElementType.Name#>>("<#=entitySet.Name#>");
                }
                return this._<#=entitySet.Name#>;
            }
        }
        private global::System.Data.Services.Client.DataServiceQuery<<#=entitySet.ElementType.Name#>> _<#=entitySet.Name#>;        
<#+
    }
    void WriteContextAddToEntitySetMethod(IEdmEntitySet entitySet)
    {
#>
        public void AddTo<#=entitySet.Name#>(<#=entitySet.ElementType.Name#> <#=LowerCaseFirstCharecter(entitySet.ElementType.Name)#>)
        {
            base.AddObject("<#=entitySet.Name#>", <#=LowerCaseFirstCharecter(entitySet.ElementType.Name)#>);
        }
        
<#+
    }    
    
    void WriteDataServiceKeyAttribute(IEdmEntityType entity)
    {
        int keyCount = entity.Key().Count();
        string keys=string.Empty;
        foreach(IEdmStructuralProperty p in  entity.Key())
        {        
            keys= string.Concat(keys,string.Format("\"{0}\"",p.Name));
            --keyCount;
                if (keyCount!=0)
                {
                    keys= string.Concat(keys,", ");
                }
            
        }#>
    [global::System.Data.Services.Common.DataServiceKeyAttribute(<#=keys#>)]
<#+}

    void WriteEntitySetAttribute(IEdmEntitySet entitySet)
    {#>
    [global::System.Data.Services.Common.EntitySetAttribute("<#=entitySet.Name #>")]    
<#+
    }

    void WriteEntityHasStreamAttribute(IEdmEntityType entityType)
    {
        bool hasStream = false;
        try { 
            hasStream = TransformContext.EdmModel.HasDefaultStream(entityType);
            if (hasStream) {#>
    [global::System.Data.Services.Common.HasStreamAttribute()]    
        <#+}
        } catch (FormatException) {
            // Swallow, if they put junk there we'll just not write the attribute
        }
    }

    void WriteEntity(IEdmEntityType entityType)
    {
        WriteEntityPropertyMappings(entityType);
        WriteEntityHasStreamAttribute(entityType);
        WriteDataServiceKeyAttribute(entityType);
        WriteTypeDeclaration(entityType);
        BeginWriteType(entityType);
        WriteTypeStaticCreateMethod(entityType);    
        WriteTypeProperties(entityType);    
        EndWriteType(entityType);    
    }

    void BeginWriteType(IEdmEntityContainer container)
    {
        BeginWriteType();    
    }

    void BeginWriteType(IEdmComplexType complexType)
    {
        BeginWriteType();
    }

    void BeginWriteType(IEdmEntityType entity)
    {
        BeginWriteType();
    }

    void BeginWriteType()
    {
#>
    {
<#+        
    }
    void EndWriteType(IEdmEntityContainer container)
    {
        EndWriteType();    
    }

    void EndWriteType(IEdmComplexType complexType)
    {
        // inherintence of complex types is not supported
        WriteINotifyPropertyChangedImplementation();
        EndWriteType();
    }

    void EndWriteType(IEdmEntityType entity)
    {
        if (entity.BaseType==null)
        {
            WriteINotifyPropertyChangedImplementation();
        }
        EndWriteType();
    }

    void EndWriteType()
    {
#>
    }
    
<#+        
    }    
    void WriteTypeDeclaration(IEdmEntityType entity )
    {
        
    if (entity.BaseType==null)
    {
        if (entity.IsAbstract)
        {
#>
    public abstract partial class <#=entity.Name #> : global::System.ComponentModel.INotifyPropertyChanged
<#+        }
        else
        {
#>
    public partial class <#=entity.Name #> : global::System.ComponentModel.INotifyPropertyChanged
<#+
        }
    }
    else
    {
        if (entity.IsAbstract)
        {
#>
    public abstract partial class <#=entity.Name #> :  <#=((IEdmEntityType)entity.BaseType).Name#>
<#+
        }
        else
        {
#>
    public partial class <#=entity.Name #> :  <#=((IEdmEntityType)entity.BaseType).Name#>
<#+            
        }
    }
    }

    void WriteTypeStaticCreateMethod(IEdmEntityType entity)
    {
        if (entity.IsAbstract)
        {
            return;    
        }
        IEdmEntityType entityToProcess=entity;
        List<IEdmProperty> nonNullableProps = new List<IEdmProperty>();
        
        do{

            var entityNonNullableProps = from item in entityToProcess.DeclaredProperties
                                    where (item.Type.IsNullable == false && 
                                                 item.Type.Definition.TypeKind== EdmTypeKind.Primitive ||
                                                item.Type.Definition.TypeKind== EdmTypeKind.Complex) ||
                                                ((item.Type.Definition.TypeKind== EdmTypeKind.Collection) && (
                                                (((IEdmCollectionType)item.Type.Definition).ElementType.Definition.TypeKind == EdmTypeKind.Primitive) || 
                                                ((IEdmCollectionType)item.Type.Definition).ElementType.Definition.TypeKind == EdmTypeKind.Complex))
                                    select item as IEdmProperty;

            foreach (IEdmProperty property in entityNonNullableProps)
            {
                nonNullableProps.Add(property);    
            }

            entityToProcess= (IEdmEntityType)entityToProcess.BaseType;
        } while (entityToProcess!=null);
        
        WriteTypeStaticCreateMethod(entity.Name, nonNullableProps);
    }    
    
    void WriteTypeProperties(IEnumerable<IEdmProperty> properties)
    {
        foreach (IEdmProperty property in properties)
        {
            string type;
            if (property.Type.Definition.TypeKind== EdmTypeKind.Primitive)
            {
                WriteTypeProperty(property.Name, (IEdmPrimitiveType) property.Type.Definition,property.Type.IsNullable);
            }
            else if (property.Type.Definition.TypeKind== EdmTypeKind.Collection)
            {
                WriteTypeProperty(property.Name, (IEdmCollectionType) property.Type.Definition);

            }
            else if (property.Type.Definition.TypeKind== EdmTypeKind.Complex)
            {
                WriteTypeProperty(property.Name, (IEdmComplexType) property.Type.Definition);
            }
            else if (property.Type.Definition.TypeKind== EdmTypeKind.Entity)
            {
                WriteTypeProperty(property.Name,(IEdmEntityType) property.Type.Definition) ;
            }
            else
            {
                type=property.Type.Definition.TypeKind.ToString();
                #>
                public <#=type#> <#=property.Name #>
                <#+
            }
        }        
    }

    void WriteTypeProperties(IEdmComplexType ctxType)
    {
        WriteTypeProperties(ctxType.DeclaredProperties);
        
    }

    void WriteTypeProperties(IEdmEntityType entity)
    {
        WriteTypeProperties(entity.DeclaredProperties);
    
    }

    void WriteTypeProperty(string propertyName,IEdmPrimitiveType primitiveType,bool isNullable)
    {

        string type;
        if (isNullable && 
            (primitiveType.PrimitiveKind!=EdmPrimitiveTypeKind.String )&&
            (primitiveType.PrimitiveKind!=EdmPrimitiveTypeKind.Binary))
        {
            type = string.Format("global::System.Nullable<{0}>",TranslateEdmType(primitiveType.PrimitiveKind));
        }
        else
        {            
            type= TranslateEdmType(primitiveType.PrimitiveKind);
        }
        WriteTypeProperty(propertyName,type,false,false);
        WriteTypePropertyFields(propertyName,type,string.Empty,false,true);

    }

    void WriteTypeProperty(string propertyName,IEdmCollectionType collectionType)
    {
        string type;
        string allocateType;
        string elementType;

        if (collectionType.ElementType.TypeKind() == EdmTypeKind.Entity)
        {
            type =     string.Format("global::System.Data.Services.Client.DataServiceCollection<{0}>",GetNameFromFullName(collectionType.ElementType.FullName()));
            allocateType=string.Format("global::System.Data.Services.Client.DataServiceCollection<{0}>(null, global::System.Data.Services.Client.TrackingMode.None)",GetNameFromFullName(collectionType.ElementType.FullName()));
            WriteTypeProperty(propertyName,type,false,true);
            WriteTypePropertyFields(propertyName,type,allocateType,false,false);
            return;
        }

        if (collectionType.ElementType.Definition.TypeKind == EdmTypeKind.Primitive)
        {        
            IEdmPrimitiveType primitiveType = collectionType.ElementType.Definition as IEdmPrimitiveType;
            elementType=TranslateEdmType(primitiveType.PrimitiveKind);
        }
        else
        {
            elementType=GetNameFromFullName(collectionType.ElementType.FullName());
        }

        type =     string.Format("global::System.Collections.ObjectModel.ObservableCollection<{0}>",elementType);
        allocateType=string.Format("global::System.Collections.ObjectModel.ObservableCollection<{0}>()",elementType);
        WriteTypeProperty(propertyName,type,false,false);
        WriteTypePropertyFields(propertyName,type,allocateType,false,true);
    }

    void WriteTypeProperty(string propertyName, IEdmComplexType ctxType)
    {
        //IEdmComplexType ctxType = (IEdmComplexType) property.Type.Definition;
        string type=ctxType.Name;
        WriteTypeProperty(propertyName,type,true,false);
        WriteTypePropertyFields(propertyName,type,string.Empty,true,true);
    }

    void WriteTypePropertyFields(string propertyName, string type, string defaultTypeAllocation, bool createIntilizationfeild, bool createOnPropertyChangeMethods)
    {
        if (!String.IsNullOrEmpty(defaultTypeAllocation))
        {
#>
        private <#=type#> _<#=propertyName#> = new <#=defaultTypeAllocation#>;
<#+        }
        else
        {
#>
        private <#=type#> _<#=propertyName#>;
<#+
        }
        if (createIntilizationfeild)
        {
#>
        private bool _<#=propertyName#>Initialized;
<#+
        }
        
        if (createOnPropertyChangeMethods)
        {
#>
        partial void On<#=propertyName #>Changing(<#=type#> value);
        partial void On<#=propertyName#>Changed();
<#+            
        }
        this.WriteLine(string.Empty);
    }

    void WriteTypeProperty(string propertyName, string typeName, bool initalizeType, bool isEntityRefrence)
    {
        StringBuilder initilizeType = new StringBuilder(string.Empty);
#>
        public <#=typeName#> <#=propertyName#>
        {
            get
            {
<#+
                if (initalizeType)
                {
        #>
                if (((this._<#=propertyName#> == null) 
                            && (this._<#=propertyName#>Initialized != true)))
                {
                    this._<#=propertyName#> = new <#=typeName#>();
                    this._<#=propertyName #>Initialized = true;
                }
<#+
                }
        #>
                return this._<#=propertyName#>;
            }
            set
            {
<#+             if (!isEntityRefrence)
                {
#>                this.On<#=propertyName#>Changing(value);
<#+
                }
#>                this._<#=propertyName#> = value;
<#+                if (initalizeType)
                {
#>                this._<#=propertyName#>Initialized = true;
<#+                }
                if (!isEntityRefrence)
                {
#>                this.On<#=propertyName#>Changed();
<#+                }
#>
                this.OnPropertyChanged("<#=propertyName#>");
            }
        }             
<#+    
    
    }

    void WriteComplexTypes()
    {
         var ctxTypes= from item in TransformContext.EdmModel.SchemaElements
                             where item.SchemaElementKind== EdmSchemaElementKind.TypeDefinition && item is IEdmComplexType
                             select item as IEdmSchemaElement;
         foreach (IEdmSchemaElement element in ctxTypes)
        {
            IEdmComplexType complexTypeDefinition = element as IEdmComplexType;
            WriteTypeDeclaration(complexTypeDefinition);
            BeginWriteType(complexTypeDefinition);
            WriteTypeStaticCreateMethod(complexTypeDefinition);
            WriteTypeProperties(complexTypeDefinition);
            EndWriteType(complexTypeDefinition);
        }
    }

    void WriteTypeStaticCreateMethod(IEdmComplexType complexType )
    {
        IEdmComplexType complexTypeToProcess=complexType;
        List<IEdmProperty> nonNullableProps = new List<IEdmProperty>();
        do
        {
            nonNullableProps.AddRange(GetNonNullableProperties(complexTypeToProcess.DeclaredProperties));
            complexTypeToProcess= (IEdmComplexType)complexTypeToProcess.BaseType;
        } while (complexTypeToProcess!=null);
            
        int propertyCount = nonNullableProps.Count();
        if (propertyCount == 0)
        {
            return;    
        }

        WriteTypeStaticCreateMethod (complexType.Name, nonNullableProps);
    }
    
    void WriteTypeStaticCreateMethod(string typeName, IEnumerable<IEdmProperty> parameters)
    {
#>
        public static <#=typeName#> Create<#=typeName#> (<#=ConstructMethodParameterList(parameters)#>)
        {
            <#=typeName#> <#=typeName.ToLower()#> = new <#=typeName#>();
<#+        
        foreach (IEdmProperty property in parameters)
        {
#>            <#=typeName.ToLower()#>.<#=property.Name#> = <#=LowerCaseFirstCharecter(property.Name)#>;
<#+    
        }
#>
            return <#=typeName.ToLower()#>;
        }
<#+
    }

    string ConstructMethodParameterList(IEnumerable<IEdmProperty> properties)
    {
        StringBuilder sb = new StringBuilder();
        int propertyCount = properties.Count();
        if (propertyCount == 0)
        {
            return sb.ToString();    
        }

        foreach (IEdmProperty property in properties)
        {
            string type=string.Empty;
            string parameterName =string.Empty;
            
            if (property.Type.Definition.TypeKind == EdmTypeKind.Primitive)
            {
                           
                IEdmPrimitiveTypeReference primitive = property.Type as IEdmPrimitiveTypeReference;
                IEdmPrimitiveType primitiveType = primitive.PrimitiveDefinition();
            
                type=TranslateEdmType(primitiveType.PrimitiveKind);
                
            }
            else if (property.Type.Definition.TypeKind == EdmTypeKind.Complex)
            {
                
                IEdmComplexType ctxType =  property.Type.Definition as IEdmComplexType;
                type=GetNameFromFullName(ctxType.FullName());
                
            }
            else if (property.Type.Definition.TypeKind == EdmTypeKind.Collection)
            {
                IEdmCollectionType collectionType =  property.Type.Definition as IEdmCollectionType;
            
                if (collectionType.ElementType.Definition.TypeKind == EdmTypeKind.Primitive)
                {
                    IEdmPrimitiveType primitiveType = collectionType.ElementType.Definition as IEdmPrimitiveType;
                    type=TranslateEdmType(primitiveType.PrimitiveKind);
                }
                else
                {
                    type=GetNameFromFullName(collectionType.ElementType.FullName());
                }    
                    
                type = string.Format("global::System.Collections.ObjectModel.ObservableCollection<{0}>",type);
            }
            
             parameterName =  LowerCaseFirstCharecter(property.Name);
             string seperator=string.Empty;
             --propertyCount;
            if (propertyCount!=0)
            {
                seperator=", ";
            }

            sb.AppendFormat("{0} {1} {2}", type,parameterName,seperator);            
        }

        sb.Remove(sb.Length-1,1);
        return sb.ToString();
    }

    IEnumerable<IEdmProperty> GetNonNullableProperties(IEnumerable<IEdmProperty> declaredProperties)
    {
        var nonNullableProps = from item in declaredProperties
                                    where (item.Type.IsNullable == false && 
                                                 item.Type.Definition.TypeKind== EdmTypeKind.Primitive ||
                                                item.Type.Definition.TypeKind== EdmTypeKind.Complex     )||
                                                (item.Type.Definition.TypeKind== EdmTypeKind.Collection)
                                                
                                                  
                                    select item as IEdmProperty;
        return  new List<IEdmProperty>(nonNullableProps);

    }    
        
    void WriteTypeDeclaration(IEdmComplexType ctxType)
    {
        // inheritence in complex types is not supported in WCF Data Services
        
#>    public partial class <#=ctxType.Name #>: global::System.ComponentModel.INotifyPropertyChanged
<#+    
    }

    void WriteTypeProperty(string propertyName, IEdmEntityType entityType)
    {
        //IEdmEntityTypeReference ctxRefType = property.Type as IEdmEntityTypeReference;
       // IEdmEntityType ctxType = ctxRefType.EntityDefinition();                
        string type=entityType.Name;
        WriteTypeProperty(propertyName,type,false,true);
        WriteTypePropertyFields(propertyName,type,string.Empty,false,false);
    }

    void WriteReferencedEntities(Dictionary<string,IEdmEntityType> processed)
    {
    
        var allModelEntiies = from item in TransformContext.EdmModel.SchemaElements
                   where item.SchemaElementKind == EdmSchemaElementKind.TypeDefinition && item is IEdmEntityType
                   select item as IEdmSchemaElement;
    
        foreach (IEdmEntityType entityType in allModelEntiies)
        {
            IEdmEntityType val;
            if (!processed.TryGetValue(entityType.Name,out val))
            {
                WriteEntity(entityType);            
            }
        }
    }    

    void WriteINotifyPropertyChangedImplementation()
    {
#>
        public event global::System.ComponentModel.PropertyChangedEventHandler PropertyChanged;        
        protected virtual void OnPropertyChanged(string property)
        {
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, new global::System.ComponentModel.PropertyChangedEventArgs(property));
            }
        }
<#+
    }

    void WriteServiceOperations(IEdmEntityContainer container )
    {
         var svcOps = from item in container.Elements
                                             where item.ContainerElementKind == EdmContainerElementKind.FunctionImport
                                             select item as IEdmFunctionImport;    
            foreach (IEdmFunctionImport svcOp in svcOps)
            {
                    
                string parameters=String.Empty;
                string queryOptions=String.Empty;
                string returnType="System.Data.Services.Client.OperationResponse";
        
        
                if (svcOp.ReturnType==null)
                {
#>                                                            
        public <#=returnType#>  <#=svcOp.Name#>()
        {             
            return this.Execute(new global::System.Uri("<#=svcOp.Name#>",global::System.UriKind.Relative),<#=GetServiceOperationHttpMethod(svcOp)#>);
        }    
<#+     
                }
                else
                {
                    if (svcOp.ReturnType.Definition.TypeKind == EdmTypeKind.Collection)
                    {
                
                        GetServiceOperationParameters(svcOp,true,out parameters,out queryOptions);
                        IEdmCollectionType collectionType = svcOp.ReturnType.Definition as IEdmCollectionType;
                        if (collectionType.ElementType.Definition.TypeKind == EdmTypeKind.Primitive)
                        {
                            IEdmPrimitiveType primitiveType=collectionType.ElementType.Definition as IEdmPrimitiveType;
                            returnType= TranslateEdmType(primitiveType.PrimitiveKind);
                            string svcOpUri=string.Format("{0}?{1}",svcOp.Name,queryOptions);
                            if (!string.IsNullOrEmpty(queryOptions))
                            {
                                svcOpUri=string.Format("{0}?{1}",svcOp.Name,queryOptions);    
                            }
                            else
                            {
                                svcOpUri=svcOp.Name;
                            }

#>        public  System.Collections.Generic.IEnumerable<<#=returnType#>>  <#=svcOp.Name#>(<#=parameters#>)
        { 
            return (System.Collections.Generic.IEnumerable<<#=returnType#>> )this.Execute<<#=returnType#>> (new global::System.Uri("<#= svcOpUri#>",global::System.UriKind.Relative),<#=GetServiceOperationHttpMethod(svcOp)#>,false);
        }
<#+      
                        }
                    else if (collectionType.ElementType.Definition.TypeKind == EdmTypeKind.Complex)
                    {
                        GetServiceOperationParameters(svcOp,true,out parameters,out queryOptions);
                        returnType=GetNameFromFullName(collectionType.ElementType.FullName());
                        string svcOpUri=string.Format("{0}?{1}",svcOp.Name,queryOptions);
                        if (!string.IsNullOrEmpty(queryOptions))
                        {
                            svcOpUri=string.Format("{0}?{1}",svcOp.Name,queryOptions);    
                        }
                        else
                        {
                            svcOpUri=svcOp.Name;
                        }
#>        public  System.Collections.Generic.IEnumerable<<#=returnType#>>  <#=svcOp.Name#>(<#=parameters#>)
        { 
            return (System.Collections.Generic.IEnumerable<<#=returnType#>> )this.Execute<<#=returnType#>> (new global::System.Uri("<#= svcOpUri#>",global::System.UriKind.Relative),<#=GetServiceOperationHttpMethod(svcOp)#>,false);
        }
<#+      
                    }
                    else
                    {
                        GetServiceOperationParameters(svcOp,false,out parameters,out queryOptions);
                        returnType=GetNameFromFullName(collectionType.ElementType.FullName());
#>        public global::System.Data.Services.Client.DataServiceQuery<<#=returnType#>> <#=svcOp.Name#>(<#=parameters#>)
        { 
            return this.CreateQuery<<#=returnType#>>("<#=svcOp.Name#>")<#=queryOptions#>;
        }
        
<#+     
                    
                }
                continue;
            }
            else if (svcOp.ReturnType.Definition.TypeKind == EdmTypeKind.Primitive)
            {
                GetServiceOperationParameters(svcOp,true,out parameters,out queryOptions);
                IEdmPrimitiveType primitiveType=svcOp.ReturnType.Definition as IEdmPrimitiveType;
                returnType= TranslateEdmType(primitiveType.PrimitiveKind);
            }
            else if (svcOp.ReturnType.Definition.TypeKind == EdmTypeKind.Complex)
            {
                GetServiceOperationParameters(svcOp,true,out parameters,out queryOptions);
                IEdmComplexType complexType=svcOp.ReturnType.Definition as IEdmComplexType;
                returnType=GetNameFromFullName(complexType.FullName());                
            }
            else if (svcOp.ReturnType.Definition.TypeKind == EdmTypeKind.Entity)
            {
                GetServiceOperationParameters(svcOp,true,out parameters,out queryOptions);
                IEdmEntityType entityType=svcOp.ReturnType.Definition as IEdmEntityType;
                returnType=GetNameFromFullName(entityType.FullName());                
                
            }
            string uriParameter;
            if (!string.IsNullOrEmpty(queryOptions))
            {
                uriParameter=string.Format("{0}?{1}",svcOp.Name,queryOptions);    
            }
            else
            {
                uriParameter=svcOp.Name;
            }
#>        public  <#=returnType#>  <#=svcOp.Name#>(<#=parameters#>)
        {
            System.Data.Services.Client.QueryOperationResponse<<#=returnType#>> response =this.Execute<<#=returnType#>>(new global::System.Uri("<#= uriParameter#>",global::System.UriKind.Relative),<#=GetServiceOperationHttpMethod(svcOp)#>,true);
            System.Collections.IEnumerator enumerator= response.GetEnumerator();
            enumerator.MoveNext();
            return (<#=returnType#>)enumerator.Current;
        }
<#+      
        }
    }
}

    string GetServiceOperationHttpMethod(IEdmFunctionImport svcOp)
    {
        return TransformContext.EdmModel.GetHttpMethod(svcOp);
    }

    void GetServiceOperationParameters(IEdmFunctionImport svcOp, bool useExecute, out string svcOpParameters,out string svcOpQueryOptions)
    {
        int paramCount = svcOp.Parameters.Count();
        string parameters=String.Empty;
        string queryOptions=String.Empty;    
        foreach (IEdmFunctionParameter p in svcOp.Parameters)
        {
            parameters=string.Concat(parameters,GetNameFromFullName(p.Type.FullName()));
            parameters=string.Concat(parameters," ");
            parameters=string.Concat(parameters,p.Name);
            if (useExecute)
            {
                queryOptions=string.Concat(queryOptions,string.Format("{0} ='\"+{0}+\"'", p.Name));
            }
            else
            {
                queryOptions=string.Concat(queryOptions,string.Format(".AddQueryOption(\"{0}\" ,\"'\"+{0}+\"'\")", p.Name));
            }
                    
            --paramCount;
            if (paramCount!=0)
            {
                parameters= string.Concat(parameters,", ");
                if (useExecute)
                {
                    queryOptions=string.Concat(queryOptions,"&");
                }
            }                                       
        }

        svcOpParameters=parameters;
        svcOpQueryOptions=queryOptions;
    }

    void WriteEntityPropertyMappings(IEdmEntityType entityType)
    {

        foreach (IEdmProperty entityProperty in entityType.DeclaredProperties)
        {
            WriteEntityPropertyMapping(entityProperty);       
        }
    }
    void WriteEntityPropertyMapping(IEdmProperty property)
    {
    
        string targetPath, sourcePath, keepInContent, contentKind, nsPrefix, nsUri;
        targetPath=sourcePath=keepInContent=contentKind=nsPrefix=nsUri= string.Empty;
        keepInContent="true";
        foreach (IEdmDirectValueAnnotation annotation in TransformContext.EdmModel.DirectValueAnnotationsManager.GetDirectValueAnnotations(property))            
        {
            if (annotation.NamespaceUri != "http://schemas.microsoft.com/ado/2007/08/dataservices/metadata")
            {
                continue;
            }

            if (annotation.Name == "FC_TargetPath" )
            {
               targetPath= GetAnnotationStringValue(annotation);
            }
            else if (annotation.Name == "FC_SourcePath")
            {
                sourcePath = GetAnnotationStringValue(annotation);
            }
            else if (annotation.Name == "FC_KeepInContent")
            {
                keepInContent = GetAnnotationStringValue(annotation).ToLower();
            }
            else if (annotation.Name == "FC_ContentKind")
            {
                contentKind = GetAnnotationStringValue(annotation);
            }
            else if (annotation.Name == "FC_NsPrefix")
            {
                nsPrefix= GetAnnotationStringValue(annotation);
            }
            else if (annotation.Name == "FC_NsUri")
            {
                nsUri= GetAnnotationStringValue(annotation);
            }

        }
        if (string.IsNullOrEmpty(targetPath))
        {
            return;
        }            
        if (!string.IsNullOrEmpty(nsUri))
        {        
    #>    [global::System.Data.Services.Common.EntityPropertyMappingAttribute("<#=sourcePath#>", "<#=targetPath#>", "<#=nsPrefix#>", "<#=nsUri#>", "<#=keepInContent#>")]        
    <#+          
        }
        else
        {
            if (string.IsNullOrEmpty(sourcePath))
            {
                sourcePath = property.Name;                    
            }
    #>    [global::System.Data.Services.Common.EntityPropertyMappingAttribute("<#=sourcePath#>", global::System.Data.Services.Common.SyndicationItemProperty.<#=GetSyndicationItemProperty(targetPath)#>, <#=GetSyndicationTextContentKind(contentKind)#>, <#=keepInContent#>)]        
    <#+          

        }
    }

    string GetAnnotationStringValue(Microsoft.Data.Edm.Annotations.IEdmDirectValueAnnotation annotation)
    {
        return ((EdmStringConstant) annotation.Value).Value;
    }

    string GetSyndicationItemProperty(string value)
    {
        string stringToRemove="Syndication";
        return ((SyndicationItemProperty)Enum.Parse(typeof(SyndicationItemProperty),  value.Remove(0, stringToRemove.Length))).ToString();
    }

    string  GetSyndicationTextContentKind(string value)
    {
        switch (value.ToLower())
        {
            case "text":return "global::System.Data.Services.Common.SyndicationTextContentKind.Plaintext";
            
            case "xhtml": return "global::System.Data.Services.Common.SyndicationTextContentKind.Xhtml";
            
            case "html": return "global::System.Data.Services.Common.SyndicationTextContentKind.Html";
            
            default: return "global::System.Data.Services.Common.SyndicationTextContentKind.Plaintext";
        }
    }
        
    string LowerCaseFirstCharecter(string text)
    {
        char[] tmpBuffer = text.ToCharArray();    
        tmpBuffer[0]=text[0].ToString().ToLowerInvariant().ToCharArray()[0];
        return new String(tmpBuffer);
    }

    string TranslateEdmType(EdmPrimitiveTypeKind kind)
    {
        string type="UNKNOWN";
        if (kind==EdmPrimitiveTypeKind.Int32)
        {
            type= "int";
        }
        else if (kind== EdmPrimitiveTypeKind.String)
        {
            type= "string";    
        }
        else if (kind==EdmPrimitiveTypeKind.Binary)
        {
            type= "byte[]";
        }
        else if (kind==EdmPrimitiveTypeKind.Decimal)
        {
            type= "decimal";
        }
        else if (kind==EdmPrimitiveTypeKind.Int16)
        {
            type= "short";    
        }
        else if(kind==EdmPrimitiveTypeKind.Single)
        {    
            type= "float";
        }
        else if (kind==EdmPrimitiveTypeKind.Boolean)
        {
            type= "bool";    
        }
        else if (kind== EdmPrimitiveTypeKind.DateTime)
        {
            type= "global::System.DateTime";
        }
        else if (kind== EdmPrimitiveTypeKind.Double)
        {
            type= "double";
        }
        else if (kind== EdmPrimitiveTypeKind.Guid)
        {
            type= "global::System.Guid";
        }
        else if (kind== EdmPrimitiveTypeKind.Byte)
        {
            type="byte";
        }
        else if (kind== EdmPrimitiveTypeKind.Int64)
        {
            type="long";
        }
        else if (kind== EdmPrimitiveTypeKind.SByte)
        {
            type="sbyte";
        }
        else if (kind == EdmPrimitiveTypeKind.Stream)
        {
            type="global::System.Data.Services.Client.DataServiceStreamLink";
        }        
        else if (kind== EdmPrimitiveTypeKind.Geography)
        {
            type= "global::System.Spatial.Geography";
        }
        else if (kind== EdmPrimitiveTypeKind.GeographyPoint)
        {
            type= "global::System.Spatial.GeographyPoint";
        }
        else if (kind== EdmPrimitiveTypeKind.GeographyLineString)
        {
            type= "global::System.Spatial.GeographyLineString";
        }
        else if (kind== EdmPrimitiveTypeKind.GeographyPolygon)
        {
            type= "global::System.Spatial.GeographyPolygon";
        }
        else if (kind== EdmPrimitiveTypeKind.GeographyCollection)
        {
            type= "global::System.Spatial.GeographyCollection";
        }
        else if (kind== EdmPrimitiveTypeKind.GeographyMultiPolygon)
        {
            type= "global::System.Spatial.GeographyMultiPolygon";
        }
        else if (kind== EdmPrimitiveTypeKind.GeographyMultiLineString)
        {
            type= "global::System.Spatial.GeographyMultiLineString";
        }
        else if (kind== EdmPrimitiveTypeKind.GeographyMultiPoint)
        {
            type= "global::System.Spatial.GeographyMultiPoint";
        }
        else if (kind== EdmPrimitiveTypeKind.Geometry)
        {
            type= "global::System.Spatial.Geometry";
        }
        else if (kind== EdmPrimitiveTypeKind.GeometryPoint)
        {
            type= "global::System.Spatial.GeometryPoint";
        }
        else if (kind== EdmPrimitiveTypeKind.GeometryLineString)
        {
            type= "global::System.Spatial.GeometryLineString";
        }
        else if (kind== EdmPrimitiveTypeKind.GeometryPolygon)
        {
            type= "global::System.Spatial.GeometryPolygon";
        }
        else if (kind== EdmPrimitiveTypeKind.GeometryCollection)
        {
            type= "global::System.Spatial.GeometryCollection";
        }
        else if (kind== EdmPrimitiveTypeKind.GeometryMultiPolygon)
        {
            type= "global::System.Spatial.GeometryMultiPolygon";
        }
        else if (kind== EdmPrimitiveTypeKind.GeometryMultiLineString)
        {
            type= "global::System.Spatial.GeometryMultiLineString";
        }
        else if (kind== EdmPrimitiveTypeKind.GeometryMultiPoint)
        {
            type= "global::System.Spatial.GeometryMultiPoint";
        }
        else if (kind== EdmPrimitiveTypeKind.DateTimeOffset)
        {
            type= "global::System.DateTimeOffset";
        }
        else if (kind== EdmPrimitiveTypeKind.Time)
        {
            type= "global::System.TimeSpan";
        }
        else
        {
            throw new Exception("Type "+kind.ToString()+" is unrecognized");
        }
        return type;
    }
    
    string GetNameFromFullName(string fullname)
    {            
        string[] fullNameParts=fullname.Split('.');
         
        return fullNameParts[fullNameParts.Length-1];
    }

    
    public CodeGenerationContext TransformContext{get;set;}    
    
    public class CodeGenerationContext
    {
        public string Namespace{get;set;}
        public string MetadataPath{get;set;}
        public string MaxProtocolVersion{get;set;}
        public IEdmModel EdmModel {get;set;}
        public CodeGenerationContext()
        {
        }
        
        /// <summary>
        /// Load an Edm Model from a file
        /// </summary>
        /// <param name="filePath"></param>
        public void LoadEdmModelFromFile(string filePath)
        {
            // Try reading the file - OK to throw if it's not found
            string modelText = File.ReadAllText(filePath);
            this.LoadEdmModelFromString(modelText);
        }
        
        /// <summary>
        /// Loads an Edm Model from a string of edmx.
        /// </summary>
        /// <param name="edmxContent"></param>
        public void LoadEdmModelFromString(string edmxContent)
        {
            IEdmModel model;
            IEnumerable<Microsoft.Data.Edm.Validation.EdmError> errors;
             using (StringReader stringReader = new StringReader(edmxContent))
            {
                using (XmlReader xmlReader = XmlReader.Create(stringReader))
                {
                    bool parsed = EdmxReader.TryParse(xmlReader, out model, out errors);
                    if (!parsed)
                    {
                        throw new Exception(errors.FirstOrDefault().ErrorMessage);    
                    }

                    EdmModel=model;
                }
            }
            DetermineNamespaceAndVersion(EdmModel);
        }

        /// <summary>
        /// Loads the EDM Model for an OData Service from a file path or a http/https path.
        /// </summary>
        public void LoadEdmModelFromMetadataPath()
        {
            IEdmModel model;
            IEnumerable<Microsoft.Data.Edm.Validation.EdmError> errors;
            Uri metadataUri = new Uri(MetadataPath,UriKind.RelativeOrAbsolute);
            Stream metadataStream= null;
            if( metadataUri.Scheme =="File") 
            {
                metadataStream= new FileStream(MetadataPath, FileMode.Open, FileAccess.Read);
            }
            else if( metadataUri.Scheme =="http" || metadataUri.Scheme =="https") 
            {
                HttpWebRequest webRequest = WebRequest.Create(metadataUri) as HttpWebRequest;
                var webResponse = webRequest.GetResponse();
                metadataStream= webResponse.GetResponseStream();
            }
            else 
            {
                throw new ArgumentException("only file,http,https schemes are supported for paths to metadata source locations");
            }

            XmlReader reader = XmlReader.Create(metadataStream, new XmlReaderSettings() { ValidationFlags = System.Xml.Schema.XmlSchemaValidationFlags.None, ValidationType = System.Xml.ValidationType.None });
            if(EdmxReader.TryParse(reader, out model, out errors))
            {
                DetermineNamespaceAndVersion(model);
            }
            else
            {
                throw new Exception(errors.FirstOrDefault().ErrorMessage);    
            }
        }
        
        public void DetermineNamespaceAndVersion(IEdmModel model)
        {
            Version dataServiceVersion = model.GetDataServiceVersion();
            string version = "3";
            if( dataServiceVersion  !=null)
            {
                version = dataServiceVersion.Major.ToString();
            }
            
            this.MaxProtocolVersion = string.Format("global::System.Data.Services.Common.DataServiceProtocolVersion.V{0}", version);                    
            EdmModel = model;
            var firstEntityType = model.SchemaElements.OfType<IEdmEntityType>().FirstOrDefault();
            if( firstEntityType == null)
            {
                this.Namespace = "DefaultNamespace";
            }
            else
            {
                this.Namespace = firstEntityType.Namespace;
            }
        }
    }
#>

<#+
public string MetadataUri { get; set; }
public string MetadataFile { get; set; }
#>